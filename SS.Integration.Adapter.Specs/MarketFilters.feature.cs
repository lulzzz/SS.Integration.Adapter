// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SS.Integration.Adapter.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MarketFilters")]
    public partial class MarketFiltersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MarketFilters.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MarketFilters", "\tIn order to avoid redundant updates\t\r\n\tI want to be able to filter updates that " +
                    "haven\'t change a market state", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Market has 3 active selections")]
        public virtual void MarketHas3ActiveSelections()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Market has 3 active selections", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table1.AddRow(new string[] {
                        "1",
                        "Home",
                        "1",
                        "true"});
            table1.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "true"});
            table1.AddRow(new string[] {
                        "3",
                        "Draw",
                        "1",
                        "true"});
#line 6
 testRunner.Given("Market with the following selections", ((string)(null)), table1, "Given ");
#line 11
 testRunner.When("Market filters are initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("Market IsSuspended is false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Market has 3 suspended selections")]
        public virtual void MarketHas3SuspendedSelections()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Market has 3 suspended selections", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table2.AddRow(new string[] {
                        "1",
                        "Home",
                        "1",
                        "false"});
            table2.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "false"});
            table2.AddRow(new string[] {
                        "3",
                        "Draw",
                        "1",
                        "false"});
#line 15
 testRunner.Given("Market with the following selections", ((string)(null)), table2, "Given ");
#line 20
 testRunner.When("Market filters are initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.Then("Market IsSuspended is true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Market update was rolled back")]
        public virtual void MarketUpdateWasRolledBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Market update was rolled back", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table3.AddRow(new string[] {
                        "1",
                        "Home",
                        "1",
                        "false"});
            table3.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "false"});
            table3.AddRow(new string[] {
                        "3",
                        "Draw",
                        "1",
                        "false"});
#line 25
 testRunner.Given("Market with the following selections", ((string)(null)), table3, "Given ");
#line 30
 testRunner.When("Market filters are initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table4.AddRow(new string[] {
                        "1",
                        "Home",
                        "0",
                        "false"});
            table4.AddRow(new string[] {
                        "2",
                        "Away",
                        "0",
                        "false"});
            table4.AddRow(new string[] {
                        "3",
                        "Draw",
                        "0",
                        "false"});
#line 32
 testRunner.And("Update Arrives", ((string)(null)), table4, "And ");
#line 37
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("Rollback change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table5.AddRow(new string[] {
                        "1",
                        "Home",
                        "0",
                        "false"});
            table5.AddRow(new string[] {
                        "2",
                        "Away",
                        "0",
                        "false"});
            table5.AddRow(new string[] {
                        "3",
                        "Draw",
                        "0",
                        "false"});
#line 39
 testRunner.And("Update Arrives", ((string)(null)), table5, "And ");
#line 44
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("Commit change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.Then("Market with id=TestId is not removed from snapshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
 testRunner.And("Market IsSuspended is true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Market receives duplicated update after the first update was commited")]
        public virtual void MarketReceivesDuplicatedUpdateAfterTheFirstUpdateWasCommited()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Market receives duplicated update after the first update was commited", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table6.AddRow(new string[] {
                        "1",
                        "Home",
                        "0",
                        "false"});
            table6.AddRow(new string[] {
                        "2",
                        "Away",
                        "0",
                        "false"});
            table6.AddRow(new string[] {
                        "3",
                        "Draw",
                        "0",
                        "false"});
#line 50
 testRunner.Given("Market with the following selections", ((string)(null)), table6, "Given ");
#line 55
 testRunner.When("Market filters are initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("Commit change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table7.AddRow(new string[] {
                        "1",
                        "Home",
                        "0",
                        "false"});
            table7.AddRow(new string[] {
                        "2",
                        "Away",
                        "0",
                        "false"});
            table7.AddRow(new string[] {
                        "3",
                        "Draw",
                        "0",
                        "false"});
#line 58
 testRunner.And("Update Arrives", ((string)(null)), table7, "And ");
#line 63
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.Then("Market with id=TestId is removed from snapshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Market initially has all selections active and later recieved an update with susp" +
            "ended selection")]
        public virtual void MarketInitiallyHasAllSelectionsActiveAndLaterRecievedAnUpdateWithSuspendedSelection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Market initially has all selections active and later recieved an update with susp" +
                    "ended selection", ((string[])(null)));
#line 67
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table8.AddRow(new string[] {
                        "1",
                        "Home",
                        "1",
                        "true"});
            table8.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "true"});
            table8.AddRow(new string[] {
                        "3",
                        "Draw",
                        "1",
                        "true"});
#line 68
 testRunner.Given("Market with the following selections", ((string)(null)), table8, "Given ");
#line 73
 testRunner.When("Market filters are initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And("Commit change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table9.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "false"});
#line 76
 testRunner.And("Update Arrives", ((string)(null)), table9, "And ");
#line 79
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.Then("Market IsSuspended is false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Market initially has all selections active and later receives update making it al" +
            "l suspended")]
        public virtual void MarketInitiallyHasAllSelectionsActiveAndLaterReceivesUpdateMakingItAllSuspended()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Market initially has all selections active and later receives update making it al" +
                    "l suspended", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table10.AddRow(new string[] {
                        "1",
                        "Home",
                        "1",
                        "true"});
            table10.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "true"});
            table10.AddRow(new string[] {
                        "3",
                        "Draw",
                        "1",
                        "true"});
#line 83
 testRunner.Given("Market with the following selections", ((string)(null)), table10, "Given ");
#line 88
 testRunner.When("Market filters are initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.And("Commit change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table11.AddRow(new string[] {
                        "1",
                        "Home",
                        "1",
                        "false"});
            table11.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "false"});
            table11.AddRow(new string[] {
                        "3",
                        "Draw",
                        "1",
                        "false"});
#line 91
 testRunner.And("Update Arrives", ((string)(null)), table11, "And ");
#line 96
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.Then("Market IsSuspended is true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Market becomes partially void")]
        public virtual void MarketBecomesPartiallyVoid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Market becomes partially void", ((string[])(null)));
#line 99
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table12.AddRow(new string[] {
                        "1",
                        "Home",
                        "1",
                        "true"});
            table12.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "true"});
            table12.AddRow(new string[] {
                        "3",
                        "Draw",
                        "1",
                        "true"});
#line 100
 testRunner.Given("Market with the following selections", ((string)(null)), table12, "Given ");
#line 105
 testRunner.When("Market filters are initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table13.AddRow(new string[] {
                        "1",
                        "Home",
                        "3",
                        "false"});
            table13.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "true"});
            table13.AddRow(new string[] {
                        "3",
                        "Draw",
                        "3",
                        "false"});
#line 106
 testRunner.And("Update Arrives", ((string)(null)), table13, "And ");
#line 111
 testRunner.Then("Market IsSuspended is false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Market becomes partially void and is suspended")]
        public virtual void MarketBecomesPartiallyVoidAndIsSuspended()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Market becomes partially void and is suspended", ((string[])(null)));
#line 113
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table14.AddRow(new string[] {
                        "1",
                        "Home",
                        "1",
                        "true"});
            table14.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "true"});
            table14.AddRow(new string[] {
                        "3",
                        "Draw",
                        "1",
                        "true"});
#line 114
 testRunner.Given("Market with the following selections", ((string)(null)), table14, "Given ");
#line 119
 testRunner.When("Market filters are initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.And("Commit change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table15.AddRow(new string[] {
                        "1",
                        "Home",
                        "3",
                        "false"});
            table15.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "false"});
            table15.AddRow(new string[] {
                        "3",
                        "Draw",
                        "3",
                        "false"});
#line 122
 testRunner.And("Update Arrives", ((string)(null)), table15, "And ");
#line 127
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
 testRunner.Then("Market IsSuspended is true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Market is partially settled")]
        public virtual void MarketIsPartiallySettled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Market is partially settled", ((string[])(null)));
#line 130
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table16.AddRow(new string[] {
                        "1",
                        "Home",
                        "1",
                        "true"});
            table16.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "true"});
            table16.AddRow(new string[] {
                        "3",
                        "Draw",
                        "0",
                        "false"});
#line 131
 testRunner.Given("Market with the following selections", ((string)(null)), table16, "Given ");
#line 136
 testRunner.When("Market filters are initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.And("Commit change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable",
                        "Price"});
            table17.AddRow(new string[] {
                        "1",
                        "Home",
                        "2",
                        "false",
                        "1.0"});
            table17.AddRow(new string[] {
                        "2",
                        "Away",
                        "2",
                        "false",
                        "0"});
#line 139
 testRunner.And("Update Arrives", ((string)(null)), table17, "And ");
#line 143
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.And("Commit change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable",
                        "Price"});
            table18.AddRow(new string[] {
                        "1",
                        "Home",
                        "2",
                        "false",
                        "1.0"});
            table18.AddRow(new string[] {
                        "2",
                        "Away",
                        "2",
                        "false",
                        "0"});
            table18.AddRow(new string[] {
                        "3",
                        "Draw",
                        "2",
                        "false",
                        "0"});
#line 145
 testRunner.And("Update Arrives", ((string)(null)), table18, "And ");
#line 150
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And("Commit change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.Then("Market with id=TestId is not removed from snapshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Voiding markets should not be applied markets that were previously active")]
        public virtual void VoidingMarketsShouldNotBeAppliedMarketsThatWerePreviouslyActive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Voiding markets should not be applied markets that were previously active", ((string[])(null)));
#line 154
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table19.AddRow(new string[] {
                        "1",
                        "Home",
                        "1",
                        "true"});
            table19.AddRow(new string[] {
                        "2",
                        "Away",
                        "1",
                        "true"});
            table19.AddRow(new string[] {
                        "3",
                        "Draw",
                        "1",
                        "true"});
#line 155
 testRunner.Given("Market with the following selections", ((string)(null)), table19, "Given ");
#line 160
 testRunner.When("Market filters are initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 161
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
 testRunner.And("Fixture is over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.Then("Market Voided=false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Voiding markets should be applied to markets which have never been active")]
        public virtual void VoidingMarketsShouldBeAppliedToMarketsWhichHaveNeverBeenActive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Voiding markets should be applied to markets which have never been active", ((string[])(null)));
#line 166
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table20.AddRow(new string[] {
                        "1",
                        "Home",
                        "0",
                        "false"});
            table20.AddRow(new string[] {
                        "2",
                        "Away",
                        "0",
                        "false"});
            table20.AddRow(new string[] {
                        "3",
                        "Draw",
                        "0",
                        "false"});
#line 167
 testRunner.Given("Market with the following selections", ((string)(null)), table20, "Given ");
#line 172
 testRunner.When("Market filters are initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 173
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
 testRunner.And("Commit change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
 testRunner.And("Fixture is over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.Then("Market Voided=true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Voiding markets should be applied even when deleted market rule is applied")]
        public virtual void VoidingMarketsShouldBeAppliedEvenWhenDeletedMarketRuleIsApplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Voiding markets should be applied even when deleted market rule is applied", ((string[])(null)));
#line 179
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Status",
                        "Tradable"});
            table21.AddRow(new string[] {
                        "1",
                        "Home",
                        "0",
                        "false"});
            table21.AddRow(new string[] {
                        "2",
                        "Away",
                        "0",
                        "false"});
            table21.AddRow(new string[] {
                        "3",
                        "Draw",
                        "0",
                        "false"});
#line 180
 testRunner.Given("Market with the following selections", ((string)(null)), table21, "Given ");
#line 185
 testRunner.When("Market filters are initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 186
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.And("Commit change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.And("Fixture is over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.And("Fixture has no markets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 190
 testRunner.And("Market filters are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
 testRunner.And("Commit change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.Then("Market Voided=true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 193
 testRunner.And("Market is not duplicated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Market rule solver must resolve correctly any conflicts")]
        public virtual void MarketRuleSolverMustResolveCorrectlyAnyConflicts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Market rule solver must resolve correctly any conflicts", ((string[])(null)));
#line 195
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Market",
                        "Name"});
            table22.AddRow(new string[] {
                        "1",
                        "One"});
            table22.AddRow(new string[] {
                        "2",
                        "Two"});
            table22.AddRow(new string[] {
                        "3",
                        "Three"});
            table22.AddRow(new string[] {
                        "4",
                        "Four"});
            table22.AddRow(new string[] {
                        "5",
                        "Five"});
            table22.AddRow(new string[] {
                        "6",
                        "Six"});
            table22.AddRow(new string[] {
                        "7",
                        "Seven"});
            table22.AddRow(new string[] {
                        "8",
                        "Eight"});
            table22.AddRow(new string[] {
                        "9",
                        "Nine"});
#line 196
 testRunner.Given("a fixture with the following markets", ((string)(null)), table22, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rule"});
            table23.AddRow(new string[] {
                        "A"});
            table23.AddRow(new string[] {
                        "B"});
            table23.AddRow(new string[] {
                        "C"});
            table23.AddRow(new string[] {
                        "D"});
#line 207
 testRunner.And("A market rule with the have the following rules", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rule",
                        "Market",
                        "Result"});
            table24.AddRow(new string[] {
                        "A",
                        "1",
                        "R"});
            table24.AddRow(new string[] {
                        "B",
                        "1",
                        "!R"});
            table24.AddRow(new string[] {
                        "C",
                        "1",
                        "E"});
            table24.AddRow(new string[] {
                        "D",
                        "1",
                        "!E"});
            table24.AddRow(new string[] {
                        "A",
                        "2",
                        "E"});
            table24.AddRow(new string[] {
                        "B",
                        "2",
                        "!E"});
            table24.AddRow(new string[] {
                        "A",
                        "3",
                        "R"});
            table24.AddRow(new string[] {
                        "B",
                        "3",
                        "E"});
            table24.AddRow(new string[] {
                        "A",
                        "4",
                        "!E"});
            table24.AddRow(new string[] {
                        "B",
                        "4",
                        "R"});
            table24.AddRow(new string[] {
                        "A",
                        "5",
                        "E"});
            table24.AddRow(new string[] {
                        "B",
                        "5",
                        "E"});
            table24.AddRow(new string[] {
                        "A",
                        "6",
                        "!E"});
            table24.AddRow(new string[] {
                        "B",
                        "6",
                        "!R"});
            table24.AddRow(new string[] {
                        "A",
                        "7",
                        "E"});
            table24.AddRow(new string[] {
                        "B",
                        "7",
                        "E"});
            table24.AddRow(new string[] {
                        "C",
                        "7",
                        "!E"});
            table24.AddRow(new string[] {
                        "D",
                        "7",
                        "E"});
            table24.AddRow(new string[] {
                        "A",
                        "8",
                        "!R"});
            table24.AddRow(new string[] {
                        "B",
                        "8",
                        "E"});
            table24.AddRow(new string[] {
                        "A",
                        "9",
                        "R"});
            table24.AddRow(new string[] {
                        "B",
                        "9",
                        "!R"});
#line 213
 testRunner.And("the market rules return the following intents", ((string)(null)), table24, "And ");
#line 237
 testRunner.When("I apply the rules", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Market",
                        "Name",
                        "Exists"});
            table25.AddRow(new string[] {
                        "1",
                        "One",
                        "true"});
            table25.AddRow(new string[] {
                        "2",
                        "Two",
                        "true"});
            table25.AddRow(new string[] {
                        "3",
                        "Three - E: B",
                        "true"});
            table25.AddRow(new string[] {
                        "4",
                        "Four",
                        "true"});
            table25.AddRow(new string[] {
                        "5",
                        "Five - E: A - E: B",
                        "true"});
            table25.AddRow(new string[] {
                        "6",
                        "Six",
                        "true"});
            table25.AddRow(new string[] {
                        "7",
                        "Seven",
                        "true"});
            table25.AddRow(new string[] {
                        "8",
                        "Eight - E: B",
                        "true"});
            table25.AddRow(new string[] {
                        "9",
                        "Nine",
                        "true"});
#line 238
 testRunner.Then("I must see these changes", ((string)(null)), table25, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Market rule solver must resolve correctly any edit conflicts")]
        public virtual void MarketRuleSolverMustResolveCorrectlyAnyEditConflicts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Market rule solver must resolve correctly any edit conflicts", ((string[])(null)));
#line 251
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Market",
                        "Name",
                        "Selections"});
            table26.AddRow(new string[] {
                        "1",
                        "One",
                        "3"});
            table26.AddRow(new string[] {
                        "2",
                        "Two",
                        "2"});
            table26.AddRow(new string[] {
                        "3",
                        "Three",
                        "1"});
            table26.AddRow(new string[] {
                        "4",
                        "Four",
                        "1"});
            table26.AddRow(new string[] {
                        "5",
                        "Five",
                        "0"});
            table26.AddRow(new string[] {
                        "6",
                        "Six",
                        "0"});
            table26.AddRow(new string[] {
                        "7",
                        "Seven",
                        "0"});
#line 252
 testRunner.Given("a fixture with the following markets", ((string)(null)), table26, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rule"});
            table27.AddRow(new string[] {
                        "A"});
            table27.AddRow(new string[] {
                        "B"});
            table27.AddRow(new string[] {
                        "C"});
            table27.AddRow(new string[] {
                        "D"});
#line 261
 testRunner.And("A market rule with the have the following rules", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rule",
                        "Market",
                        "Result"});
            table28.AddRow(new string[] {
                        "A",
                        "1",
                        "CS"});
            table28.AddRow(new string[] {
                        "B",
                        "1",
                        "AS"});
            table28.AddRow(new string[] {
                        "C",
                        "1",
                        "RS"});
            table28.AddRow(new string[] {
                        "D",
                        "1",
                        "CD"});
            table28.AddRow(new string[] {
                        "A",
                        "2",
                        "CS"});
            table28.AddRow(new string[] {
                        "B",
                        "2",
                        "RS"});
            table28.AddRow(new string[] {
                        "A",
                        "3",
                        "CS"});
            table28.AddRow(new string[] {
                        "B",
                        "3",
                        "CD"});
            table28.AddRow(new string[] {
                        "A",
                        "4",
                        "AS"});
            table28.AddRow(new string[] {
                        "B",
                        "4",
                        "RS"});
            table28.AddRow(new string[] {
                        "A",
                        "5",
                        "AS"});
            table28.AddRow(new string[] {
                        "B",
                        "5",
                        "CD"});
            table28.AddRow(new string[] {
                        "A",
                        "6",
                        "CD"});
            table28.AddRow(new string[] {
                        "B",
                        "6",
                        "RS"});
            table28.AddRow(new string[] {
                        "A",
                        "7",
                        "RS"});
            table28.AddRow(new string[] {
                        "B",
                        "7",
                        "RS"});
#line 267
 testRunner.And("the market rules return the following intents", ((string)(null)), table28, "And ");
#line 285
 testRunner.When("I apply the rules", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Market",
                        "Name",
                        "NumberOfSelections",
                        "Names"});
            table29.AddRow(new string[] {
                        "1",
                        "OneD",
                        "4",
                        "One1A, One2A, One3A, One4B"});
            table29.AddRow(new string[] {
                        "2",
                        "Two",
                        "2",
                        "Two1A, Two2A"});
            table29.AddRow(new string[] {
                        "3",
                        "ThreeB",
                        "1",
                        "Three1A"});
            table29.AddRow(new string[] {
                        "4",
                        "Four",
                        "1",
                        "Four1A"});
            table29.AddRow(new string[] {
                        "5",
                        "FiveB",
                        "1",
                        "Five1A"});
            table29.AddRow(new string[] {
                        "6",
                        "SixA",
                        "0",
                        ""});
            table29.AddRow(new string[] {
                        "7",
                        "Seven",
                        "0",
                        ""});
#line 286
 testRunner.Then("I must see these selection changes", ((string)(null)), table29, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
